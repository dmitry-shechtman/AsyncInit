<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using Ditto.AsyncInit.Services;
using Microsoft.Practices.Unity;
using System;

namespace Ditto.AsyncInit.Unity
{
    /// <summary>
    /// Adds a set of asynchronous registration methods to <see cref="IUnityContainer"/>.
    /// </summary>
    public static class UnityRegisterAsyncTypeExtensions
    {
<#
foreach (var map in new[] { false, true })
foreach (var args in new[] { false, true })
foreach (var name in new[] { false, true })
foreach (var lifetimeManager in new[] { false, true })
{
	var tArgs = map
		? new[] { "TFrom", "TTo" }
		: new[] { "T" };
	var tArgDocs = map
		? new[] { "The requested type.", "The actual type." }
		: new[] { "The type to register." };
	var tArgList = "<" + string.Join(", ", tArgs) + ">";
	var cArgList = "{" + string.Join(",", tArgs) + "}";

	var tFromArgList = map
		? "<TFrom>"
		: tArgList;
	var tInitArgList = map
		? tArgList
		: "<T, T>";
	var clTarget = map
		? "773158a0-bea9-482f-b8ac-9670797b0da5"
		: "30e16988-88d9-400d-bf76-21885513e5df";

	var paramTypes = new List<string> { "IUnityContainer" };
	var cParamTypes = new List<string> { "IUnityContainer" };
	var paramNames = new List<string> { "container" };
	var paramDocs = new List<string> { "The container." };

	if (name)
	{
		paramTypes.Add("string");
		cParamTypes.Add("String");
		paramNames.Add("name");
		paramDocs.Add("The name to use for registration.");
	}

	if (lifetimeManager)
	{
		paramTypes.Add("LifetimeManager");
		cParamTypes.Add("LifetimeManager");
		paramNames.Add("lifetimeManager");
		paramDocs.Add("The <see cref=\"LifetimeManager\"/> that controls the lifetime of the returned instance.");
	}

	if (args)
	{
		paramTypes.Add("AsyncInitArgs");
		cParamTypes.Add("InjectionMember[]");
		paramNames.Add("args");
		paramDocs.Add("Initialization arguments.");
	}
	else
	{
		paramTypes.Add("params InjectionMember[]");
		cParamTypes.Add("InjectionMember[]");
		paramNames.Add("injectionMembers");
		paramDocs.Add("Injection configuration objects.");
	}

	var paramList = string.Join(", ", Enumerable.Range(0, paramTypes.Count).Select(j => paramTypes[j] + " " + paramNames[j]));
	var cParamList = string.Join(",", Enumerable.Range(0, cParamTypes.Count).Select(j => cParamTypes[j]));
#>
        /// <summary>
        /// Registers the specified asynchronously initialized type with the container.
        /// </summary>
<#
	for (int j = 0; j < tArgs.Length; ++j)
	{
#>
        /// <typeparam name="<#= tArgs[j] #>"><#= tArgDocs[j] #></typeparam>
<#
	}
	for (int j = 0; j < paramTypes.Count; ++j)
	{
#>
        /// <param name="<#= paramNames[j] #>"><#= paramDocs[j] #></param>
<#
	}
#>
        /// <returns>The container.</returns>
		/// <seealso cref="UnityContainerExtensions.RegisterType<#= cArgList #>(<#= cParamList #>)" />
		/// <conceptualLink target="<#= clTarget #>" />
        public static IUnityContainer RegisterAsyncType<#= tArgList #>(this <#= paramList #>)
<#
	if (map)
	{
#>
			where TTo : TFrom
<#
	}
#>
        {
            if (container == null)
                throw new ArgumentNullException("container");
<#
	var parms = new List<string>();
	if (name)
		parms.Add("name");
	if (lifetimeManager)
		parms.Add("lifetimeManager");
	if (args)
	{
#>
			var injectionMembers = CreateInjectionMembers(args);
<#
	}
	parms.Add("injectionMembers");
	var argList = string.Join(", ", parms);
#>
            return container.RegisterType<IAsyncInitializer<#= tFromArgList #>, UnityAsyncInitializer<#= tInitArgList #>>(<#= argList #>);
        }

<#
}
#>
		private static InjectionConstructor[] CreateInjectionMembers(AsyncInitArgs args)
		{
            if (args == null)
                throw new ArgumentNullException("args");
			return new[] { new InjectionConstructor(args) };
		}
	}
}
