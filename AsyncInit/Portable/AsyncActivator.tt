<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Ditto.AsyncInit.Internal;
using System.Threading;
using System.Threading.Tasks;

namespace Ditto.AsyncInit
{
    /// <summary>
    /// Provides factory methods for asynchronously initialized types.
    /// </summary>
    public static class AsyncActivator
    {
<#@ include file="AsyncInit.t4"#>
        /// <summary>
        /// Asynchronously creates and initializes an instance of the specified type.
        /// </summary>
        /// <typeparam name="T">The type of object to create (must implement <see cref="IAsyncInit<#= baseDocTArgList #>"/>).</typeparam>
<#
	for (int j = 0; j < i; ++j)
	{
#>
        /// <typeparam name="<#= baseTArgs[j] #>">The type of the <#= argNames[j] #>initialization argument.</typeparam>
<#
	}
	for (int j = 0; j < i; ++j)
	{
#>
        /// <param name="<#= baseArgs[j] #>">The <#= argNames[j] #>initialization argument.</param>
<#
	}
#>
        /// <returns>A <see cref="Task"/> capturing the initialization.</returns>
        public static async Task<T> CreateAsync<#= tArgList #>(<#= baseParamList #>)
            where T : IAsyncInit<#= baseTArgList #>
        {
            T value = Utilities.CreateInstance<T>();
            await value.InitAsync(<#= baseArgList #>).ConfigureAwait(false);
            return value;
        }

        /// <summary>
        /// Asynchronously creates and initializes an instance of the specified type.
        /// </summary>
        /// <typeparam name="T">The type of object to create (must implement <see cref="ICancelableAsyncInit<#= baseDocTArgList #>"/>).</typeparam>
<#
	for (int j = 0; j < i; ++j)
	{
#>
        /// <typeparam name="<#= baseTArgs[j] #>">The type of the <#= argNames[j] #>initialization argument.</typeparam>
<#
	}
	for (int j = 0; j < i; ++j)
	{
#>
        /// <param name="<#= baseArgs[j] #>">The <#= argNames[j] #>initialization argument.</param>
<#
	}
#>
        /// <param name="cancellationToken">Cancellation token.</param>
        /// <returns>A <see cref="Task"/> capturing the initialization.</returns>
        public static async Task<T> CreateAsync<#= tArgList #>(<#= cancelParamList #>)
            where T : ICancelableAsyncInit<#= baseTArgList #>
        {
            T value = Utilities.CreateInstance<T>();
            await value.InitAsync(<#= cancelArgList #>).ConfigureAwait(false);
            return value;
        }

<#
}
#>
    }
}
