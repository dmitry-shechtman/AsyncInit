<?xml version="1.0" encoding="utf-8"?>
<topic id="c731bb1a-010a-40c6-856b-421ebbd05a26" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <summary>
      <para>This topic details the steps necessary for defining a type that implements an AsyncInit interface.</para>
    </summary>

    <introduction>
      <para>
        In some cases, a type cannot be derived from a particular <codeInline>AsyncInitBase</codeInline> or <codeInline>CancelableAsyncInitBase</codeInline>, e.g. when it must derive from a predefined base class.
        In such scenarios <codeInline>IAsyncInit</codeInline> and <codeInline>ICancelableAsyncInit</codeInline> should be used instead.
      </para>
    </introduction>

    <procedure>
      <steps class="ordered">
        
        <step>
          <content>
            <para>
              Determine the types of the initialization arguments (if any), e.g. <codeInline>IProgress&lt;long&gt;</codeInline>.
            </para>
          </content>
        </step>

        <step>
          <content>
            <para>
              Implement the corresponding <codeInline>IAsyncInit</codeInline> or <codeInline>ICancelableAsyncInit</codeInline> <legacyItalic>(recommended)</legacyItalic>:
            </para>
            <code language="C#">
              using Ditto.AsyncInit;

              class UniversalAnswerService : ICancelableAsyncInit&lt;IProgress&lt;long&gt;&gt;
              {
                  public int Answer { get; private set; }
                  
                  async Task ICancelableAsyncInit&lt;IProgress&lt;long&gt;&gt;.InitAsync(IProgress&lt;long&gt; progress, CancellationToken cancellationToken)
                  {
                      await Task.Delay(TimeSpan.FromDays(7500000 * 365.25), cancellationToken);
                      Answer = 42;
                  }
              }
            </code>
          </content>
        </step>
        
        <step>
          <content>
            <para>
              Implement a private parameterless constructor:
            </para>
            <code language="C#">
              private UniversalAnswerService()
              {
              }
            </code>
          </content>
        </step>
        
        <step>
          <content>
            <para>
              Implement a <codeInline>CreateAsync()</codeInline> method:
            </para>
            <code language="C#">
              public async Task&lt;UniversalAnswerService&gt; CreateAsync(IProgress&lt;long&gt; progress, CancellationToken cancellationToken)
              {
                  return AsyncActivator.CreateAsync&lt;UniversalAnswerService, IProgress&lt;long&gt;&gt;(progress, cancellationToken);
              }
            </code>
          </content>
        </step>
      </steps>

      <conclusion>
        <content>
          Your class may now be consumed asynchronously:
        </content>
      </conclusion>

    </procedure>

    <codeExample>
      <code language="C#">
        var service = await UniversalAnswerService.CreateAsync(progress, cancellationToken);
        var answer = service.Answer;
      </code>
    </codeExample>

    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->

    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->

    <!-- <security>Optional discussion of security issues.</security> -->

    <relatedTopics>
      <link xlink:href="edeb370d-6d7e-4f82-adab-f2326d89c857"/>
      <link xlink:href="c0f9e874-dd33-473b-a245-85fc69447a4b"/>
    </relatedTopics>
  </developerHowToDocument>
</topic>
