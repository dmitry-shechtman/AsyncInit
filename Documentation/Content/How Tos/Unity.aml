<?xml version="1.0" encoding="utf-8"?>
<topic id="cef4f9eb-4ea8-42cd-8f95-bf65b5923a4c" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <summary>
      <para>This topic details the basics of registering and resolving asynchronously initialized types with AsyncInit and Unity IoC Container.</para>
    </summary>

    <procedure>
      <steps class="ordered">
        
        <step>
          <content>
            <para>
              Install <externalLink>
                <linkUri>https://nuget.org/packages/Ditto.AsyncInit.Unity</linkUri>
                <linkText>Ditto.AsyncInit.Unity</linkText>
              </externalLink>:
            </para>
            <code language="PowerShell">
              Install-Package Ditto.AsyncInit.Unity
            </code>
          </content>
        </step>

        <step>
          <content>
            <para>Define the interface:</para>
            <code language="C#">
        interface IUniversalAnswerService
        {
            int Answer { get; }
        }
            </code>
          </content>
        </step>

        <step>
          <content>
            <para>Implement it, deriving from an appopriate <codeInline>AsyncInitBase</codeInline> or <codeInline>CancelableAsyncInitBase</codeInline> <legacyItalic>(recommended)</legacyItalic>:</para>
          </content>
          <code language="C#">
        using Ditto.AsyncInit;

        class UniversalAnswerService : CancelableAsyncInitBase&lt;UniversalAnswerService&gt;, IUniversalAnswerService
        {
            private UniversalAnswerService()
                : base(null)
            {
            }

            protected override async Task InitAsync(CancellationToken cancellationToken)
            {
                await Task.Delay(TimeSpan.FromDays(7500000 * 365.25), cancellationToken);
                Answer = 42;
            }

            public int Answer { get; private set; }
        }
          </code>
        </step>

        <step>
          <content>
            <para>Register the asynchronous mapping with the container:</para>
            <code language="C#">
        using Ditto.AsyncInit.Unity;

        container.RegisterAsyncType&lt;IUniversalAnswerService, UniversalAnswerService&gt;(new ContainerControlledLifetimeManager());
            </code>
          </content>
        </step>

        <step>
          <content>
            <para>Resolve the interface asynchronously:</para>
            <code language="C#">
        using Ditto.AsyncInit.Unity;

        var service = await container.ResolveAsync&lt;IUniversalAnswerService&gt;(cancellationToken);
        var answer = service.Answer;
            </code>
          </content>
        </step>

      </steps>
      
      <conclusion>
        <legacyBold>Done!</legacyBold> Advanced usage scenarios shall be documented per request.
      </conclusion>
      
    </procedure>
    <relatedTopics>
      <link xlink:href="c0f9e874-dd33-473b-a245-85fc69447a4b"/>
      <link xlink:href="edeb370d-6d7e-4f82-adab-f2326d89c857"/>
    </relatedTopics>
  </developerHowToDocument>
</topic>
